#!/usr/bin/python

# ------------------------------------------------------------------
# Name  : WeatherLogger_01.py
# Source: https://raw.githubusercontent.com/walter-rothlin/Source-Code/master/Python_WaltisExamples/Code_05_DataLogger/WeatherLogger_01.py
#
# Description: Polling REST Service and write values to console
# https://openweathermap.org/current
#
# Autor: Walter Rothlin
#
# History:
# 06-Jul-2022   Walter Rothlin      Initial Version generated by Postman
# 03-Sep-2025   Walter Rothlin      Changes for HFU 2025
# ------------------------------------------------------------------

import json
import requests
import time
import datetime
import urllib.parse


def getTimestamp():
    return '{ts:%Y-%m-%d %H:%M:%S}'.format(ts=datetime.datetime.now())


if __name__ == "__main__":

    end_point_url = "https://api.openweathermap.org/data/2.5/weather"
    appId = "144747fd356c86e7926ca91ce78ce170"

    ort_default = 'Wangen SZ'
    ort = input(f"Ort  [*{ort_default}]   :")
    if ort == "":
        ort = ort_default
    ort_encoded = urllib.parse.quote(ort)

    language_default = 'de'
    language = input(f"Sprache [*{language_default},el,en,fr,hr,it]:")
    if language == '':
        language = language_default

    units_default = "metric"
    units = input(f"Units [*{units_default},standard, imperial]:")
    if units == '':
        units = units_default
    units_letter = '°C'
    if units == 'imperial':
        units_letter = '°F'
    elif units == 'standard':
        units_letter = 'K'

    params_end_point = {
        'appid': appId,
        'q': ort,
        'units': units,
        'lang': language,
        'mode': '',  # xml, html
    }

    pollingTime = input("Polling-Time [s] (default 1): ") or "1"
    pollingTime = float(pollingTime)

    max_counter = input("Anzahl requests (default -1): ") or "-1"
    max_counter = int(max_counter)

    logFilename = input('Log-File Name:')

    log_delim = '|'

    firstTime = True
    counter = 0
    doLoop = True
    old_values_to_log = ''
    pinging = False
    while doLoop:
        counter += 1
        if False:
            request_url = f'{end_point_url}?q={ort_encoded}&units={units}&lang={language}&appid={appId}'
            print(f'Request:{request_url}')
            print('\n\n')
            response = requests.get(request_url)
        else:
            response = requests.get(end_point_url, params=params_end_point)

        responseStr = response.text
        # print(responseStr)
        # print('\n\n')

        jsonResponse = json.loads(responseStr)
        # print(jsonResponse)
        # print('\n\n')

        weather_data = {
            "ortsname": jsonResponse['name'],
            "land": jsonResponse['sys']['country'],

            "temperatur": {
                "wert": jsonResponse['main']['temp'],
                "einheit": units_letter
            },
            "luftdruck": {
                "wert": jsonResponse['main']['pressure'],
                "einheit": "hPa"
            },
            "luftfeuchtigkeit": {
                "wert": jsonResponse['main']['humidity'],
                "einheit": "%"
            },

            "koordinaten": {
                "lon": jsonResponse['coord']['lon'],
                "lat": jsonResponse['coord']['lat']
            },

            "wetterbeschreibung": jsonResponse['weather'][0]['description'],
            "icon_url": f"http://openweathermap.org/img/w/{jsonResponse['weather'][0]['icon']}.png",

            "wind": {
                "geschwindigkeit": {
                    "wert": jsonResponse['wind']['speed'],
                    "einheit": "m/s"
                },
                "richtung": {
                    "wert": jsonResponse['wind']['deg'],
                    "einheit": "°"
                }
            }
        }

        if firstTime:
            title_str = f"# File created: {getTimestamp()}, Data for {weather_data['ortsname']} {weather_data['land']} ({weather_data['koordinaten']['lon']}/{weather_data['koordinaten']['lat']})"
            header_items = [
                "Timestamp          ",
                "Temp     ",
                "Druck           ",
                "Feuchtigkeit",
                "Wind                         ",
                "Beschreibung ",
                "Icon        ",
            ]

            header_str = log_delim.join(header_items)
            print(title_str)
            print(header_str)
            if logFilename != '':
                fHandler = open(logFilename, "a")
                fHandler.write(title_str + "\n" + header_str + "\n")
                fHandler.close()

        values_to_log = [
            f"{weather_data['temperatur']['wert']:>5}",
            f"{weather_data['temperatur']['einheit']:>3}",
            f"{weather_data['luftdruck']['wert']:>10}",
            f"{weather_data['luftdruck']['einheit']:>5}",
            f"{weather_data['luftfeuchtigkeit']['wert']:>9}",
            f"{weather_data['luftfeuchtigkeit']['einheit']:>2}",
            f"{weather_data['wind']['geschwindigkeit']['wert']:>10}",
            f"{weather_data['wind']['geschwindigkeit']['einheit']:>4}",
            f"{weather_data['wind']['richtung']['wert']:>10}",
            f"{weather_data['wind']['richtung']['einheit']:>2}",

            f"{weather_data['wetterbeschreibung']:>10}",
            f"{weather_data['icon_url']:>10}",
        ]
        log_str = log_delim.join(values_to_log)

        if old_values_to_log != log_str:
            old_values_to_log = str(log_str)
            if pinging:
                print()
            logStr = f'{getTimestamp()}{log_delim}{log_str}'
            print(logStr)
            if logFilename != '':
                fHandler = open(logFilename, "a")
                fHandler.write(logStr + "\n")
                fHandler.close()
        else:
            pinging = True
            print('.', end='', flush=True)

        time.sleep(pollingTime)
        firstTime = False
        if max_counter == -1:
            do_loop = True
        else:
            if counter >= max_counter:
                doLoop = False