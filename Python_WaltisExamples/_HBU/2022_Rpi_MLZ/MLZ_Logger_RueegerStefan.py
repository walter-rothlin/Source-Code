#!/usr/bin/python
'''
##############################################################################
#
#     W e t t e r  -  L o g g e r
#   -------------------------------
#
#   Name  : logWetter.py
#   Autor : Stefan Rüeger, HFU Klasse 20e
# 
#   inspiriert von WeatherLogger_00.py von Walter Rothlin
#
#   Ruft aktuelle Wetterdaten von openweathermap.org ab und übergibt die Daten
#   an ein Objekt der Klasse 'log2disk'. Diese schreibt einen formatierten 
#   Daten-String mit Zeit- und Datums-Markierung in eine Datei. 
#   Optional werden Logeinträge nur bei geänderten Werte gespeichert.
#
#   History:
#   --------------------------------------------------------------------------
#   06.Jul.2022    Walter Rothlin    Initial Version generated by Postman
#   01.Oct.2022    Stefan Rüeger     persönlicher API-Key, erweiterte Ausgabe
#   02.Oct.2022    Stefan Rüeger     Datei-Ausgabe hinzugefügt
#   24.Nov.2022    Stefan Rüeger     Erweiterungen und Anpassungen gemäss
#                                    Aufgabenstellung MLZ 
#                                    - klassenbasierte Dateiausgabe
#                                    - bestimmbarer Delimiter
#                                    - Daueraufzeichnung
#                                    - Rollende Aufzeichnung mit 
#                                      definierbarer Länge
#
##############################################################################
'''

#------------- Konfigrations-Parameter ---------------------------------------
location      = "Kindhausen"                # Wetter-Standort
log_intervall = 5                           # Aufzeichnungsintervall in [s]
log_filename  = 'wetterlog.txt'             # Dateiname für Aufzeichnung
log_path      = '.'                         # Dateipfad
max_entries   = 0                           # maximale Anzahl Logeinträge
log_diff_only = False                       # nur abweichende Werte speichern
dl            = " | "                         # Delimiter
log_append    = False

# Datumsformat, z.B. '%Y-%m-%d': 2022-10-24, '%d.%m.%Y': 2022-10-24 
logdate_fmt   = '%d.%M.%Y'

# openweathermap.org API-Key
API_key       = "aef827df6d038c6c4e604cf10a15962c"

# URL für REST-Aufruf
url_str       = "https://api.openweathermap.org/data/2.5/weather?q="\
                 +location+"&units=metric&lang=de&appid="+API_key
#-----------------------------------------------------------------------------

import json
import requests
from time import sleep
from datetime import datetime
from sys import exit, argv
from os import path
from textwrap import dedent


class log2disk:
    '''
    Klasse: log2disk.py

    Schreibt Log-Daten in Datei.
    '''
    # für alle instanzierten Objekte verfügbare Attribute
    # obj_counter = 0

    ###### Initialisierung der Klasse ######
    #
    # Alle Objekt-Attribute werden hier entgegengenommen. Die Attribute
    # self.xyz gelten nur für das jeweils instanzierte Objekt.
    # Mit __ angeführte Attribute sind nach aussen nicht sichtbar.
    #
    def __init__(self, fname="log2disk.log", fpath=".", hdline1='', hdline2='', append=False):
        '''
        Initialisierung: x = log2disk(fname = "WetterLog.txt", fpath = ".")

        Argumente:  fname   Name der Logdatei
                    fpath   Pfad der Logdatei
        '''
        # self.xy = xy: obj1.xy innerhalb Objekt gültig, xy nur in __init__ gültig
        self.__max_entries = 0  # 0 = keine Limitierung
        self.__log_entries = 0
        self.__log_delimiter = '|'
        self.__logdate_format = '%Y-%m-%d'
        self.__log_entry_old = '' # zur Prüfung, ob Differenz zu aktuellen Werten
        self.__log_diff_only = True
        self.__log_filename = path.join(fpath, fname)
        self.log_severity_list = ('DEBUG', 'INFO', 'WARNINGS', 'ERROR', 'CRITICAL', 'N/A')

        # Falls Daten nicht angefügt werden sollen, 
        # Datei neu erstellen und Kopfzeilen einfügen.

        if not append:
            with open(self.__log_filename, "w", encoding='utf-8') as f:
                f.write("\nWETTERDATEN-AUFZEICHNUNG\n" + 79 * "-" + "\n")
                f.write("\nAufzeichnungs-Start: " + datetime.today().strftime(self.__logdate_format) \
                                        + "  "  + datetime.today().strftime('%H:%M:%S'))
                f.write("\nDateipfad und Name:  " + self.__log_filename + "\n\n")

                f.write(hdline1 + "\n" + hdline2 + "\n" + 78 * "-" + "\n")
        # Falls doch, Anzahl schon bestehender Einträge ermitteln.
        else:
            with open(self.__log_filename, "r", encoding='utf-8') as f:
                self.__log_entries = len(f.readlines())-3


    def set_log_date_format(self, logdate_fmt):
        '''
        Setzt Formatierung von Datums-Stempel.
        
        Argumente:  logdate_fmt    Standardwert = '%Y-%m-%d'
        '''
        self.__logdate_format = logdate_fmt


    def set_delimiter(self, delimiter):
        '''
        Definiert das Trennzeichen zwischen den Werten. 
        
        Argumente:  delimiter    Standardwert = '|'
        '''
        self.__log_delimiter = delimiter


    def set_max_entries(self, max_entries):
        '''
        Setzt maximale Anzahl Log-Einträge.
        
        Argumente:  max_entries    Standardwert 0 = Endlos-Aufzeichnung
        '''
        self.__max_entries = max_entries


    def set_diff_only(self, diff_only):
        '''
        Aktiviert Differenz-Aufzeichnung. Nur abweichende Daten werden im
        Log gespeichert.
        
        Argumente:  diff_only    Standardwert False = alles aufzeichnen
        '''
        self.__log_diff_only = diff_only


    def get_log_entries(self):
        '''
        Liefert die Anzahl gespeicherter Log-Einträge.
        
        Argumente:  keine
        '''
        return self.__log_entries


    def writeln(self, logtxt, logdata, loglevel=None):   # Parameter Overload
        '''
        Schreibt aktuelle Werte in Log-Datei.

        Argumente:  logtext         Log-Eintrag als String
                    logseverity     Log-Level: 0=DEBUG, 1=INFO, 2=WARNINGS, 
                                               3=ERROR, 4=CRITICAL
        '''
        loglevel = 5 if not(0 <= loglevel <= 4) else loglevel
        
        # Erstelle neuen Eintrag im Log. Prüfe vorher, ob nur Differenz aufgezeichnet 
        # werden soll und falls ja, ob Eintrag zum Letzten unterschiedlich ist.
        if not(self.__log_diff_only and (logtxt == self.__log_entry_old)):

            # Falls maximale Anzahl Einträge erreicht, vor Schreiben von neuem Eintrag 
            # den ersten Eintrag entfernen. Wenn max_entries = 0: Keine Limitierung.
            if (self.__max_entries != 0 and self.__log_entries >= self.max_entries):
                self.removeFirstLogEntry()

            '''
            with open(self.__log_filename, "a", encoding='utf-8') as f:
                logdate = datetime.today().strftime(self.__logdate_format)
                logtime = datetime.today().strftime('%H:%M:%S')
                f.write(logdate + self.__log_delimiter + logtime + \
                self.__log_delimiter + logtxt + self.log_severity_list[loglevel] + "\n")
            self.__log_entry_old = logtxt
            '''

            logdate = datetime.today().strftime(self.__logdate_format)
            logtime = datetime.today().strftime('%H:%M:%S')

            logtext=logdate + self.__log_delimiter + logtime + self.__log_delimiter
            for i in range(len(logdata)):
                logtext = logtext + logdata[i] + self.__log_delimiter

            with open(self.__log_filename, "a", encoding='utf-8') as f:
                f.write(logtext + self.log_severity_list[loglevel] + "\n")
            self.__log_entry_old = logtxt

            self.__log_entries +=1


    def removeFirstLogEntry(self):
        '''
        Entfernt ersten Log-Eintrag aus Log-Datei. Wird bei rollender Aufzeichnung
        vor dem Anfügen eines neuen Eintrages aufgerufen.

        Argumente:  keine
        '''
        with open(self.__log_filename, "r", encoding='utf-8') as f:
            log_lines = f.readlines()
        
        with open(self.__log_filename, "w", encoding='utf-8') as f:
            for log_entry_count, log_line in enumerate(log_lines):
                if (log_entry_count != 3):
                    f.write(log_line)



def grad2cardinal(degree):
    '''
    Wandelt Richtung von 0-360° in Kardinale (N, NO, O...) um.
    
    Argumente:      Richtung in Grad
    Rückgabewert:   Richtung in Kardinale als String
    '''
    return ('N', 'NO', 'O', 'SO', 'S', 'SW', 'W', 'NW', 'N')[int(degree/45+0.5)]


def showDocumentation():
    '''
    Übernimmt aus den Methoden und Funktionen den Namen und die Multiline-
    String-Kommentare und listet sie formatiert auf dem Bildschirm auf.
    '''
    print(__doc__)
    print(dedent(log2disk.__doc__))
    
    doc_elements = ['__init__', 'writeln', 'removeFirstLogEntry', 'set_max_entries', \
                    'set_diff_only', 'get_log_entries', showDocumentation, main]
    
    for doc_element in doc_elements:

        if (type(doc_element) == str):
            doc_object = getattr(log2disk, doc_element)
            doc_type = 'Methode:'
        else:
            doc_object = doc_element
            doc_type = 'Funktion:'

        doc_name = doc_object.__qualname__
        doc_description = dedent(doc_object.__doc__)
        print(79 * "-")
        print("\n" + doc_type, doc_name, "\n" + doc_description)


def logWeather():
    '''
    Ruft aktuelle Wetterdaten von openweathermap.org ab und zeigt Werte zum 
    Programmstart in einer Übersicht an. Listet die weiteren Abrufe auf und
    schreibt sie in die Logdatei. 
    '''
    # Parses the response String and converts it to a JSON structutre (Dict-List-Dict...)
    logStartDate = datetime.today().strftime(logdate_fmt)
    logStartTime = datetime.today().strftime('%H:%M:%S')

    header1 = "      date"+dl+"    time"+dl+"temp"+dl+"hum"+dl+"press"+dl+"w_spd"+dl+"w_dir"+dl+"condition"
    header2 = "  "+logdate_fmt+dl+"HH:MM:SS"+dl+"[°C]"+dl+"[%]"+dl+"[hPa]"+dl+"[m/s]"+dl+"[str]"+dl+"[str]"

    log = log2disk(log_filename, log_path, header1, header2, log_append)
    log.set_max_entries(max_entries)
    log.set_diff_only(log_diff_only)
    log.set_log_date_format(logdate_fmt)
    log.set_delimiter(dl)
    
    displog1 = displog2 = displog3 = displog4 = ""
    
    while(True):

        wd = json.loads(requests.get(url_str).text)
        logdate = datetime.today().strftime(logdate_fmt)
        logtime = datetime.today().strftime('%H:%M:%S')

        title = "WETTERDATEN aus " + wd['name'] + " " + wd['sys']['country']
        print("\033c\n ", title, (65 - len(title)) * " ", logtime, "\n" + 79 * "-" + "\n")
        print("  {:3.1f}°C, gefühlt wie {:3.1f}°C. {}".format(wd['main']['temp'], wd['main']['feels_like'], wd['weather'][0]['description']) + ".\n")
        print("  {}° nördliche Breite, {}° östliche Länge".format(wd['coord']['lat'], wd['coord']['lon']))
        print("  www.openstreetmap.org/#map=14/"+str(wd['coord']['lat'])+"/"+str(wd['coord']['lon']), "\n")
        print("              Wind: {:.1f} m/s aus {}".format(wd['wind']['speed'], grad2cardinal(wd['wind']['deg'])))
        print("         Luftdruck: {:d} hPa".format(wd['main']['pressure']))
        print("  Rel. Luftfeuchte: {:d}%".format(wd['main']['humidity']))
        print("             Sicht: {:.1f} km".format(wd['visibility']/1000))
        print("\n         Log-Start:", logStartDate, logStartTime, "(drücke CTRL-C um abzubrechen)")
        print("         Log-Datei:", path.join(log_path, log_filename))

        logtxt = "{:.1f}".format(wd['main']['temp']) + dl
        logtxt += "{:3d}".format(wd['main']['humidity']) + dl
        logtxt += "{:5d}".format(wd['main']['pressure']) + dl
        logtxt += "{:5.1f}".format(wd['wind']['speed']) + dl
        logtxt += "{:>5}".format(grad2cardinal(wd['wind']['deg'])) + dl
        logtxt += "{:24}".format(wd['weather'][0]['description'])

        logdata = []
        logdata.append("{:.1f}".format(wd['main']['temp']))
        logdata.append("{:3d}".format(wd['main']['humidity']))
        logdata.append("{:5d}".format(wd['main']['pressure']))
        logdata.append("{:5.1f}".format(wd['wind']['speed']))
        logdata.append("{:>5}".format(grad2cardinal(wd['wind']['deg'])))
        logdata.append("{:24}".format(wd['weather'][0]['description']))

        displog5, displog4, displog3, displog2 = displog4, displog3, displog2, displog1
        displog1 = logdate + dl + logtime + dl + logtxt
        print("\n", header1, "\n", header2, "\n", 79 * "-", "\n", sep="", end="")
        print(displog1, "\n", displog2, "\n", displog3, "\n", displog4, "\n", displog5, sep="")

        # Setze Debug-Level abhängig von Wetterdaten auf INFO, WARNINGS oder CRITICAL
        log_severity = 1
        if wd['main']['temp'] > 30 or wd['wind']['speed'] > 40:
            log_severity = 2
        elif wd['main']['temp'] > 40 or wd['wind']['speed'] > 80:
            log_severity = 4

        log.writeln(logtxt, logdata, log_severity)

        try:
            sleep(log_intervall)
        except:
            print("\n\nAufzeichnung beendet.")
            print("Log-Daten abgelegt unter:", path.join(log_path, log_filename))
            print("Total Log-Einträge:", log.get_log_entries(), "\n")
            exit()


def main():
    '''
    Zeigt bei direktem Aufruf des Moduls eine kurze Beschreibung
    und alle möglichen Argumente an.
    '''
    
    help1 = dedent( \
    '''
    Klasse log2disk
    -----------------------------------------------------------------
    Dieses Modul definiert die Klasse log2disk und ist für den Import
    in einem Python-Skript vorgesehen:

    import log2disk

    Diese Argumente stehen bei direktem Aufruf zur Verfügung:
    ''')
    
    help2 = dedent( \
    '''
    log2disk.py -l | -h | -s

      -l  startet Log-Aufzeichnung
      -h  zeigt dieses Hilfe an
      -s  zeigt die Dokumentation des Moduls auf dem Bildschirm an

    Tipp für Anzeige der Dokumentation:

    log2disk.py -s | more           seitenweise Anzeige
    log2disk.py -s > log2disk.doc   schreibt Dokumentation in Datei
    ''')
    logWeather()
    if len(argv) > 1:
        if argv[1] == '-h':
            print(help2)
        elif argv[1] == '-s':
            showDocumentation()
        elif argv[1] == '-l':
            logWeather()
        else:
            print("Fehler: Unbekannte Argumente")
            print(help2)
    else:
        print(help1, help2)


if __name__ == '__main__':
    main()
