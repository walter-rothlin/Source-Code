-- MySQL Script generated by MySQL Workbench
-- 04/12/18 21:00:24
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema hwz_test
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `hwz_test` ;

-- -----------------------------------------------------
-- Schema hwz_test
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `hwz_test` DEFAULT CHARACTER SET utf8 ;
USE `hwz_test` ;

-- -----------------------------------------------------
-- Table `hwz_test`.`orte`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `hwz_test`.`orte` ;

CREATE TABLE IF NOT EXISTS `hwz_test`.`orte` (
  `ort_id` SMALLINT(5) UNSIGNED NOT NULL AUTO_INCREMENT,
  `plz` SMALLINT(4) NOT NULL,
  `bezeichnung` VARCHAR(45) CHARACTER SET 'big5' NOT NULL,
  PRIMARY KEY (`ort_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 20
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `hwz_test`.`adressen`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `hwz_test`.`adressen` ;

CREATE TABLE IF NOT EXISTS `hwz_test`.`adressen` (
  `adress_id` SMALLINT(5) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `vorname` VARCHAR(45) NOT NULL,
  `strasse` VARCHAR(45) NOT NULL,
  `orte_ort_id` SMALLINT(5) UNSIGNED NOT NULL,
  PRIMARY KEY (`adress_id`),
  INDEX `fk_adressen_orte_idx` (`orte_ort_id` ASC),
  CONSTRAINT `fk_adressen_orte`
    FOREIGN KEY (`orte_ort_id`)
    REFERENCES `hwz_test`.`orte` (`ort_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 23
DEFAULT CHARACTER SET = utf8;

USE `hwz_test` ;

-- -----------------------------------------------------
-- Placeholder table for view `hwz_test`.`adressliste`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `hwz_test`.`adressliste` (`ID` INT, `Familienname` INT, `Vorname` INT, `Strasse` INT, `Postleitzahl` INT, `Ortschaft` INT);

-- -----------------------------------------------------
-- procedure createAdresse
-- -----------------------------------------------------

USE `hwz_test`;
DROP procedure IF EXISTS `hwz_test`.`createAdresse`;

DELIMITER $$
USE `hwz_test`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `createAdresse`(IN name VARCHAR(45), IN vorname VARCHAR(45), IN strasse VARCHAR(45), IN plz SMALLINT(4), IN ortsBezeichnung VARCHAR(45), OUT generatedId SMALLINT(5))
BEGIN
	CALL getOrtId(plz, ortsBezeichnung, @ort_id);
    INSERT INTO adressen (name, vorname, strasse, orte_ort_id) VALUES (name, vorname, strasse, @ort_id);
	SELECT LAST_INSERT_ID() INTO generatedId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteAdresse
-- -----------------------------------------------------

USE `hwz_test`;
DROP procedure IF EXISTS `hwz_test`.`deleteAdresse`;

DELIMITER $$
USE `hwz_test`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteAdresse`(IN id SMALLINT(5))
BEGIN
	DELETE FROM adressen WHERE adress_id=id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteAdresseCascade
-- -----------------------------------------------------

USE `hwz_test`;
DROP procedure IF EXISTS `hwz_test`.`deleteAdresseCascade`;

DELIMITER $$
USE `hwz_test`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteAdresseCascade`(IN id SMALLINT(5))
BEGIN
	SET @ortID = (SELECT orte_ort_id FROM adressen WHERE adress_id = id);
	DELETE FROM adressen WHERE adress_id=id;
    CALL deleteOrtIfUnused(@ortID);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteOrtIfUnused
-- -----------------------------------------------------

USE `hwz_test`;
DROP procedure IF EXISTS `hwz_test`.`deleteOrtIfUnused`;

DELIMITER $$
USE `hwz_test`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `deleteOrtIfUnused`(IN id SMALLINT(5))
BEGIN
	IF (SELECT COUNT(orte_ort_id) FROM adressen WHERE orte_ort_id=id) = 0 THEN
		DELETE FROM orte WHERE ort_id=id;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getOrtId
-- -----------------------------------------------------

USE `hwz_test`;
DROP procedure IF EXISTS `hwz_test`.`getOrtId`;

DELIMITER $$
USE `hwz_test`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `getOrtId`(IN plz SMALLINT(4), IN bezeichnung VARCHAR(45), out id SMALLINT(5))
BEGIN
	IF((select count(*) from orte where orte.plz = plz and orte.bezeichnung = bezeichnung) = 0) THEN
		INSERT INTO orte (`plz`, `bezeichnung`) VALUES (plz, bezeichnung);
    END IF;
    select orte.ort_id from orte where orte.plz = plz and orte.bezeichnung = bezeichnung into id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateAdresse
-- -----------------------------------------------------

USE `hwz_test`;
DROP procedure IF EXISTS `hwz_test`.`updateAdresse`;

DELIMITER $$
USE `hwz_test`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `updateAdresse`(IN id SMALLINT(5), IN name VARCHAR(45), IN vorname VARCHAR(45), IN strasse VARCHAR(45), IN plz SMALLINT(4), IN ortsBezeichnung VARCHAR(45))
BEGIN
	CALL getOrtId(plz, ortsBezeichnung, @ort_id);
    UPDATE adressen SET name=name, vorname=vorname, strasse=strasse, orte_ort_id=@ort_id WHERE adress_id=id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `hwz_test`.`adressliste`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `hwz_test`.`adressliste` ;
DROP TABLE IF EXISTS `hwz_test`.`adressliste`;
USE `hwz_test`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `hwz_test`.`adressliste` AS select `hwz_test`.`adressen`.`adress_id` AS `ID`,`hwz_test`.`adressen`.`name` AS `Familienname`,`hwz_test`.`adressen`.`vorname` AS `Vorname`,`hwz_test`.`adressen`.`strasse` AS `Strasse`,`hwz_test`.`orte`.`plz` AS `Postleitzahl`,`hwz_test`.`orte`.`bezeichnung` AS `Ortschaft` from (`hwz_test`.`adressen` join `hwz_test`.`orte`) where (`hwz_test`.`adressen`.`orte_ort_id` = `hwz_test`.`orte`.`ort_id`) order by `hwz_test`.`adressen`.`name`,`hwz_test`.`adressen`.`vorname`;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
