#!/usr/bin/python3

# ------------------------------------------------------------------
# Name  : WeatherLogger_00.py
# Source: https://raw.githubusercontent.com/walter-rothlin/Source-Code/master/Python_WaltisExamples/Code_05_DataLogger/WeatherLogger_00.py
#
# Description: Polling REST Service and write values to console
# https://openweathermap.org/current
#
# Autor: Walter Rothlin
#https://api.openweathermap.org/data/2.5/weather?q=Wangen+SZ&units=metric&lang=de&appid=bf5f3af5ca5bea4a83f7bd46cf83a077"
# History:
# 06-Jul-2022   Walter Rothlin      Initial Version generated by Postman
# ------------------------------------------------------------------

import json
import requests
import time 
import os

url = "https://api.openweathermap.org/data/2.5/weather?q=Birr+AG&units=metric&lang=de&appid=bf5f3af5ca5bea4a83f7bd46cf83a077"

class Logger:
    def __init__(self, file_path, file_name, delimiter="|", scroll_limit=100, strategy="Fixed Slices", append=False):
        self.file_path = file_path
        self.file_name = file_name
        self.delimiter = delimiter
        self.scroll_limit = scroll_limit
        self.strategy = strategy
        self.log_entries = []
        self.timestamp_format = "%Y-%m-%d %H:%M:%S"
        self.file_mode = 'a' if append else 'w'
        self.start_time = time.strftime(self.timestamp_format)
        self.last_logged_data = None

        #Header
        self.create_log_file()
        
        
    def __str__(self):
        return (f"Logger Object:\n"
                f"File: {os.path.join(self.file_path, self.file_name)}\n"
                f"Delimiter: {self.delimiter}\n"
                f"Scroll Limit: {self.scroll_limit}\n"
                f"Strategy: {self.strategy}\n"
                f"Start Time: {self.start_time}")

    def create_log_file(self):
        file = os.path.join(self.file_path, self.file_name)
        with open(file, self.file_mode) as f:
            # Header schreiben
            f.write(f"<!-- Logfile: {self.file_name}, Start-Time: {self.start_time} -->\n")
            f.write(f"Timestamp{self.delimiter}Log-Level{self.delimiter}Message\n")
        

    def log(self, level, message):
        if self.strategy == "OnlyChanges" and message == self.last_logged_data:
            return  #ohne änderungen
        self.last_logged_data = message  #daten speichern
        
        timestamp = time.strftime(self.timestamp_format)
        entry = f"{timestamp}{self.delimiter}{level}{self.delimiter}{message}"
        self.log_entries.append(entry)
        

        # Scroll-Strategie anwenden, wenn die Grenze überschritten wird
        if len(self.log_entries) > self.scroll_limit:
            if self.strategy == "Fixed Slices":
                self.log_entries.pop(0)

        # In Datei schreiben
        self.write_to_file(entry)

    def write_to_file(self, entry):
        file = os.path.join(self.file_path, self.file_name)
        with open(file, 'a') as f:
            f.write(entry + '\n')

    # Setter für Timestamp-Format
    def set_timestamp_format(self, fmt):
        self.timestamp_format = fmt

    # Setter für Delimiter
    def set_delimiter(self, delimiter):
        self.delimiter = delimiter

    # Setter für Scroll-Limit
    def set_scroll_limit(self, limit):
        self.scroll_limit = limit

    # Setter für Logging-Strategie
    def set_strategy(self, strategy):
        self.strategy = strategy


if __name__ == '__main__':
    #Logger 
    logger = Logger(file_path=".", file_name="weather_log.txt", delimiter=";", append=False)
   

    # Wetterdaten alle 60 Sekunden abrufen
    sample_time = 60  

    while True:
        try:
            response = requests.get(url)
            if response.status_code == 200:#wetterdaten zurückgegeben
                weather_data = response.json()
                #Wetterdaten
                temperature = round(weather_data["main"]["temp"],2)
                humidity = round(weather_data["main"]["humidity"])
                description = weather_data["weather"][0]["description"]

                # Log-Nachricht
                log_message = f"Temperature: {temperature}°C, Humidity: {humidity}%, Weather: {description}"

                # Log-Level 'INFO'
                logger.log("INFO", log_message)

                print(f"Logged: {log_message}")

            else:
                # unerwartete Statuscodes
                logger.log("WARNING", f"Unexpected status code: {response.status_code}")
                logger.log("ERROR", f"Failed to retrieve data. Status code: {response.status_code}")

        except Exception as e:
            logger.log("CRITICAL", f"Exception occurred: {str(e)}")

        # Wartezeit vor dem nächsten aufruf
        time.sleep(sample_time)
